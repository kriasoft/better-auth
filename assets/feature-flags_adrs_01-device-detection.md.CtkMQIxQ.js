import{_ as s,c as e,o as a,a0 as t}from"./chunks/framework.BXjtgrTJ.js";const k=JSON.parse('{"title":"Architecture Decision Record: Device Detection Strategy","description":"","frontmatter":{},"headers":[],"relativePath":"feature-flags/adrs/01-device-detection.md","filePath":"feature-flags/adrs/01-device-detection.md"}'),n={name:"feature-flags/adrs/01-device-detection.md"};function l(r,i,h,o,p,d){return a(),e("div",null,i[0]||(i[0]=[t(`<h1 id="architecture-decision-record-device-detection-strategy" tabindex="-1">Architecture Decision Record: Device Detection Strategy <a class="header-anchor" href="#architecture-decision-record-device-detection-strategy" aria-label="Permalink to &quot;Architecture Decision Record: Device Detection Strategy&quot;">​</a></h1><p><strong>Status</strong>: Accepted<br><strong>Date</strong>: 2025-01-21<br><strong>Author</strong>: Feature Flags Team</p><h2 id="context-and-problem-statement" tabindex="-1">Context and Problem Statement <a class="header-anchor" href="#context-and-problem-statement" aria-label="Permalink to &quot;Context and Problem Statement&quot;">​</a></h2><p>The feature flags plugin needs device detection capability for targeting rules (e.g., showing features only to mobile users, A/B testing by platform). The initial implementation used regex-heavy detection which raised performance concerns.</p><p>Should we use a full-featured library like <code>ua-parser-js</code> or implement optimized built-in detection?</p><h2 id="decision-drivers" tabindex="-1">Decision Drivers <a class="header-anchor" href="#decision-drivers" aria-label="Permalink to &quot;Decision Drivers&quot;">​</a></h2><ul><li><strong>Performance</strong>: Must work efficiently in serverless/edge environments</li><li><strong>Bundle Size</strong>: Critical for cold starts and deployment limits</li><li><strong>Accuracy</strong>: Should correctly identify common devices/browsers</li><li><strong>Maintenance</strong>: Minimize ongoing maintenance burden</li><li><strong>Flexibility</strong>: Support various deployment scenarios</li></ul><h2 id="considered-options" tabindex="-1">Considered Options <a class="header-anchor" href="#considered-options" aria-label="Permalink to &quot;Considered Options&quot;">​</a></h2><h3 id="option-1-always-use-ua-parser-js" tabindex="-1">Option 1: Always Use ua-parser-js <a class="header-anchor" href="#option-1-always-use-ua-parser-js" aria-label="Permalink to &quot;Option 1: Always Use ua-parser-js&quot;">​</a></h3><ul><li>✅ 99%+ accuracy</li><li>✅ Regular updates</li><li>✅ Rich data (versions, models)</li><li>❌ 60KB bundle size</li><li>❌ Slower cold starts</li><li>❌ External dependency</li></ul><h3 id="option-2-built-in-detection-only" tabindex="-1">Option 2: Built-in Detection Only <a class="header-anchor" href="#option-2-built-in-detection-only" aria-label="Permalink to &quot;Option 2: Built-in Detection Only&quot;">​</a></h3><ul><li>✅ 2KB bundle size</li><li>✅ Fast performance</li><li>✅ No dependencies</li><li>❌ 95% accuracy</li><li>❌ Manual maintenance</li><li>❌ Limited data</li></ul><h3 id="option-3-dual-approach-selected" tabindex="-1">Option 3: Dual Approach (Selected) <a class="header-anchor" href="#option-3-dual-approach-selected" aria-label="Permalink to &quot;Option 3: Dual Approach (Selected)&quot;">​</a></h3><ul><li>✅ 2KB default size</li><li>✅ Optional enhanced mode</li><li>✅ User choice</li><li>✅ Best of both worlds</li><li>⚠️ More complex</li><li>⚠️ Two code paths</li></ul><h2 id="decision-outcome" tabindex="-1">Decision Outcome <a class="header-anchor" href="#decision-outcome" aria-label="Permalink to &quot;Decision Outcome&quot;">​</a></h2><p><strong>Chosen option</strong>: Option 3 - Dual Approach</p><p>Built-in optimized detection as default, with optional <code>ua-parser-js</code> integration.</p><h3 id="implementation" tabindex="-1">Implementation <a class="header-anchor" href="#implementation" aria-label="Permalink to &quot;Implementation&quot;">​</a></h3><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Default: Built-in detection (2KB)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> uaCache</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Map</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">UserAgentInfo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;();</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> parseUserAgent</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">userAgent</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> UserAgentInfo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // Check cache</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> cached</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> uaCache.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(userAgent);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (cached) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> cached;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // Optimized pattern matching</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> info</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    device: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">detectDevice</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ua),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    browser: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">detectBrowser</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ua),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    os: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">detectOS</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ua),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    platform: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">detectPlatform</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ua),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  };</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // LRU cache</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  uaCache.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">set</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(userAgent, info);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> info;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h2 id="positive-consequences" tabindex="-1">Positive Consequences <a class="header-anchor" href="#positive-consequences" aria-label="Permalink to &quot;Positive Consequences&quot;">​</a></h2><ul><li><strong>Performance</strong>: 10x faster for cached requests</li><li><strong>Flexibility</strong>: Users choose accuracy vs performance</li><li><strong>Compatibility</strong>: Works in all environments</li><li><strong>Bundle</strong>: Minimal default impact</li></ul><h2 id="negative-consequences" tabindex="-1">Negative Consequences <a class="header-anchor" href="#negative-consequences" aria-label="Permalink to &quot;Negative Consequences&quot;">​</a></h2><ul><li><strong>Complexity</strong>: Two code paths to maintain</li><li><strong>Documentation</strong>: Must explain both options</li><li><strong>Testing</strong>: More test scenarios</li></ul><h2 id="performance-metrics" tabindex="-1">Performance Metrics <a class="header-anchor" href="#performance-metrics" aria-label="Permalink to &quot;Performance Metrics&quot;">​</a></h2><table tabindex="0"><thead><tr><th>Metric</th><th>Built-in</th><th>ua-parser-js</th></tr></thead><tbody><tr><td>Bundle Size</td><td>+2KB</td><td>+60KB</td></tr><tr><td>First Parse</td><td>0.1ms</td><td>2ms</td></tr><tr><td>Cached Parse</td><td>0.01ms</td><td>0.01ms</td></tr><tr><td>Accuracy</td><td>95%</td><td>99%+</td></tr><tr><td>Cold Start Impact</td><td>Negligible</td><td>+50-100ms</td></tr></tbody></table><h2 id="migration-path" tabindex="-1">Migration Path <a class="header-anchor" href="#migration-path" aria-label="Permalink to &quot;Migration Path&quot;">​</a></h2><ol><li>Default remains lightweight</li><li>Users can opt-in to enhanced:<div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">bun</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> add</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ua-parser-js</span></span></code></pre></div></li><li>Configure plugin:<div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">featureFlags</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  parsing: { useEnhancedUA: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span></code></pre></div></li></ol><h2 id="references" tabindex="-1">References <a class="header-anchor" href="#references" aria-label="Permalink to &quot;References&quot;">​</a></h2><ul><li><a href="https://bundlephobia.com/package/ua-parser-js" target="_blank" rel="noreferrer">Bundle Size Analysis</a></li><li><a href="https://mikhail.io/serverless/coldstarts/" target="_blank" rel="noreferrer">Serverless Cold Starts</a></li><li><a href="https://gs.statcounter.com/" target="_blank" rel="noreferrer">User Agent Statistics</a></li><li><a href="#link-to-issue">Original Issue Discussion</a></li></ul>`,29)]))}const g=s(n,[["render",l]]);export{k as __pageData,g as default};
